#  Copyright 2023 Stanford University Convex Optimization Group
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
name: Build Environment
description: "Build the environment using pyproject.toml and uv"

inputs:
  working-directory:
    description: 'Directory where the Python project is located'
    required: false
    default: '.'
  python-version:
    description: 'The Python we shall use'
    required: false
    default: '3.12'

runs:
  using: "composite"

  steps:
    - name: Checkout [${{ github.repository }}]
      uses: actions/checkout@v4

    # Install UV (Unix)
    - name: Install UV (Unix)
      working-directory: ${{ inputs.working-directory }}
      if: runner.os == 'Linux' || runner.os == 'macOS'
      shell: bash
      run: |
        set -eo pipefail
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        echo "${{ inputs.working-directory }}/.venv/bin" >> $GITHUB_PATH

        # Ensure the venv/bin is first in the PATH
        unset PYTHONHOME  # Unset the PYTHONHOME environment variable
                          # if set to avoid any system Python fallback


      # Install UV (Windows)
    - name: Install UV (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        irm https://astral.sh/uv/install.ps1 | iex
        $uvPath = "C:\Users\runneradmin\.local\bin"
        Add-Content $env:GITHUB_PATH $uvPath

        # Modify PATH to only include the virtual environment's Scripts directory
        Add-Content $env:GITHUB_PATH ${{ github.workspace }}\.venv\Scripts

        # Unset PYTHONHOME to avoid any system Python being used
        Remove-Item -Path Env:PYTHONHOME -ErrorAction SilentlyContinue

    - name: Install pip and create venv
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        # Create virtual environment with uv
        uv venv --python ${{ inputs.python-version }}

        # Ensure pip is installed and up-to-date in the virtual environment
        # python -m ensurepip --upgrade

    - name: Check dependency file compatibility
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        if [ -f pyproject.toml ] && [ -f requirements.txt ]; then
          echo "Error: Both pyproject.toml and requirements.txt exist. Please use only one dependency specification method."
          exit 1
        fi

    # Install dependencies from pyproject.toml
    - name: Install dependencies from pyproject.toml
      working-directory: ${{ inputs.working-directory }}
      if: hashFiles(format('{0}/pyproject.toml', inputs.working-directory)) != ''
      shell: bash
      run: |
        # Set up error handling
        set -eo pipefail

        echo "📦 Installing dependencies from pyproject.toml"

        # Check for lockfile and install accordingly
        if [ -f "uv.lock" ]; then
          echo "Using lockfile (frozen installation)"
          uv sync --all-extras --dev --frozen || {
            echo "❌ Frozen installation failed. Your lockfile may be outdated."
            echo "Try running 'uv lock' to update the lockfile or remove the --frozen flag."
            exit 1
          }
        else
          echo "No lockfile found, installing dependencies directly"
          uv sync --all-extras --dev

          # Create a lockfile for future builds if installation was successful
          echo "Creating lockfile for future installations"
          uv lock --all-extras --dev
        fi

        # Verify installation
        echo "✅ Dependencies installed successfully"
        uv pip list | grep -v "^-" | wc -l | xargs -I{} echo "Total packages installed: {}"
        which python

        # Set path for subsequent steps
        echo "$PWD/.venv/bin" >> $GITHUB_PATH
        echo $GITHUB_PATH

        # For Windows compatibility
        [ -d "$PWD/.venv/Scripts" ] && echo "$PWD/.venv/Scripts" >> $GITHUB_PATH

        which python

    # run if the file pyproject.toml exists
    - name: Install the dependencies
      working-directory: ${{ inputs.working-directory }}
      if: hashFiles('requirements.txt') != ''
      shell: bash
      run : |
        cat requirements.txt
        uv pip install -r requirements.txt
